{"version":3,"sources":["logo.svg","actions/postActions.js","components/Posts/Posts.js","actions/types.js","components/Posts/Postform.js","App.js","registerServiceWorker.js","reducers/postReducer.js","reducers/index.js","store.js","index.js"],"names":["module","exports","__webpack_require__","p","deletePost","postID","dispatch","url","concat","console","log","fetch","method","then","res","Posts","onUpdate","onDelete","_this","props","this","fetchPosts","nextProps","newPost","posts","unshift","_this2","postItems","map","post","react_default","a","createElement","key","id","Segment","Group","raised","inverted","color","name","textAlign","description","reciever","price","Button","icon","size","type","onClick","length","Component","connect","state","items","item","json","payload","catch","err","error","updatePost","postData","headers","content-type","body","JSON","stringify","PostForm","loading","e","preventDefault","setState","onChange","Object","defineProperty","target","value","onSubmit","createPost","_this$state","Form","stacked","Input","fluid","iconPosition","placeholder","App","Grid","verticalAlign","className","Column","style","maxWidth","src","logo","alt","Postform","components_Posts_Posts","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialState","combineReducers","arguments","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","__REDUX_DEVTOOLS_EXTENSION__","Root","Switch","Route","exact","path","component","React","RootWithAuth","withRouter","ReactDOM","render","es","BrowserRouter","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5036d50f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { FETCH_POSTS, NEW_POST, DELETE_POST, UPDATE_POST} from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  const url = 'http://127.0.0.1:8000/api/items/?format=json';   \r\n\r\n  fetch(url)\r\n  .then(res => res.json())\r\n  .then(posts =>\r\n      dispatch({\r\n        type: FETCH_POSTS,\r\n        payload: posts\r\n      })\r\n    ).catch(err => {\r\n      console.error(\"ERROR\" + err);\r\n  \r\n    });\r\n};\r\n\r\nexport const createPost = postData => dispatch => {\r\n  const url = 'http://127.0.0.1:8000/api/items/';\r\n  fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify(postData)\r\n  })\r\n    .then(res => res.json())\r\n    .then(post =>\r\n      dispatch({\r\n        type: NEW_POST,\r\n        payload: post\r\n      })\r\n    );\r\n};\r\n\r\nexport const updatePost = postID => postData => dispatch =>\r\n{\r\n  //TODO\r\n  const url = `http://127.0.0.1:8000/api/items/${postID}/`;\r\n  fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify(postData)\r\n  })\r\n    .then(res => res.json())\r\n    .then(post =>\r\n      dispatch({\r\n        type: NEW_POST,\r\n        payload: post\r\n      })\r\n    );\r\n\r\n};\r\n\r\nexport const deletePost = postID => dispatch =>\r\n{\r\n  const url = `http://127.0.0.1:8000/api/items/${postID}/`;\r\n  console.log(\"URL USED FOR DELETE: \" + url);\r\n\r\n  fetch(url, {\r\n    method: 'DELETE'\r\n  })\r\n  .then(res => {\r\n    \r\n\r\n  })\r\n  \r\n\r\n};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts,updatePost, deletePost } from '../../actions/postActions';\r\nimport {Segment, Button} from 'semantic-ui-react';\r\n\r\nclass Posts extends Component {\r\n  componentWillMount() {\r\n  this.props.fetchPosts();\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost);\r\n    }\r\n  }\r\n  onUpdate = (postID) =>\r\n  {\r\n  \r\n    console.log(\"Update BUTTON ID: \" + postID);\r\n  }\r\n  onDelete = (postID) =>\r\n  {\r\n    console.log(\"DELETE BUTTON ID: \"+ postID);\r\n    this.props.deletePost(postID);\r\n    //console.log(\"ON DELETE PRESSED: \" + this.post.key);\r\n    \r\n  }\r\n  render() {\r\n    \r\n    const postItems = this.props.posts.map(post => (\r\n      <div key={post.id} >\r\n      <Segment.Group raised>\r\n      \r\n        <Segment inverted color='blue'> <b>{post.name}</b> </Segment>\r\n        <Segment textAlign='left'> Note: {post.description}</Segment>\r\n        <Segment textAlign='left'> To: {post.reciever}</Segment>\r\n        <Segment textAlign='left'> Price: {post.price}</Segment>\r\n        <Segment textAlign='right'>\r\n        \r\n        <Button icon = 'edit outline' color = 'yellow' size = 'small' type=\"submit\" onClick={ () => this.onUpdate(post.id)}></Button>\r\n        <Button icon = 'window close' color = 'red' size = 'small' type=\"submit\" onClick = {()=>this.onDelete(post.id)}></Button>\r\n       \r\n        </Segment >\r\n    </Segment.Group>\r\n    <br></br>\r\n\r\n    </div>\r\n    ));\r\n    return (\r\n      <div>\r\n        <h2>Shopping List</h2>\r\n        {\r\n          postItems.length === 0 &&\r\n        <h2>\r\n          <i>Your Shopping List Is Empty ... </i>\r\n        </h2>\r\n      }\r\n              \r\n                <i>You Have {postItems.length} Items In Your Shopping List.</i>\r\n\r\n       {postItems}\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPosts.propTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  updatePost: PropTypes.func.isRequired,\r\n  deletePost: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts,updatePost,deletePost })(Posts);","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';\r\nexport const DELETE_POST = 'DELETE_POST';\r\nexport const UPDATE_POST = 'UPDATE_POST';","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createPost,deletePost } from '../../actions/postActions';\r\nimport {Form, Segment, Button} from 'semantic-ui-react';\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\n\r\nclass PostForm extends Component {\r\n\r\n  state = {\r\n    name:'',\r\n    description:'',\r\n    reciever:'',\r\n    price:'',\r\n    loading:false,\r\n  }\r\n  onDelete = (e) =>\r\n  {\r\n    e.preventDefault();\r\n    \r\n    const post = {\r\n      name:this.state.name,\r\n      description:this.state.description,\r\n      reciever:this.state.reciever,\r\n      price:this.state.price,\r\n     \r\n    };\r\n    this.setState({loading:true});\r\n    this.props.deletePost(post);\r\n\r\n  }\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  onSubmit = (e) =>{\r\n    e.preventDefault();\r\n    \r\n    const post = {\r\n      name:this.state.name,\r\n      description:this.state.description,\r\n      reciever:this.state.reciever,\r\n      price:this.state.price,\r\n     \r\n    };\r\n    \r\n    this.setState({loading:true});\r\n    this.props.createPost(post);\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {name,description,reciever,price} = this.state; \r\n\r\n\r\n    return (\r\n      <div>\r\n  \r\n        <h2>Input Form</h2>\r\n       \r\n          <div>\r\n                  <Form onSubmit = {this.onSubmit}>\r\n                                <Segment stacked>\r\n                                    <Form.Input fluid name='name' icon='gift' iconPosition='left' \r\n                                    placeholder ='Item Name' onChange = {this.onChange} type = 'text'\r\n                                    value = {name} />\r\n\r\n                                    <Form.Input fluid name='description' icon='sticky note' iconPosition='left' \r\n                                    placeholder ='Note' onChange = {this.onChange} type = 'text'\r\n                                    value = {description}/>\r\n\r\n                                    <Form.Input fluid name='reciever' icon='user' iconPosition='left' \r\n                                    placeholder ='Reciever Name' onChange = {this.onChange} type = 'text'\r\n                                    value = {reciever}/>\r\n                                    \r\n                                    <Form.Input fluid name='price' icon='dollar sign' iconPosition='left' \r\n                                    placeholder ='Item Price' onChange = {this.onChange} type = 'text'\r\n                                    value = {price}/>\r\n                                    <Button color = 'blue' fluid size = 'large' type=\"submit\" >Submit</Button>\r\n                                </Segment>\r\n\r\n                            </Form>\r\n            \r\n          </div>\r\n     \r\n    \r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPostForm.propTypes = {\r\n  createPost: PropTypes.func.isRequired,\r\n  deletePost: PropTypes.func.isRequired\r\n};\r\n\r\n\r\n\r\nexport default connect(null, { createPost,deletePost })(PostForm);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Posts from './components/Posts/Posts';\nimport PostForm from './components/Posts/Postform';\n\nimport {Grid} from 'semantic-ui-react';\n\n\n\n//Test\nclass App extends Component {\n  render() {\n    return (\n      \n     \n        \n        <Grid textAlign = 'center' verticalAlign ='middle' className='app'>\n        \n        <Grid.Column style = {{maxWidth:550}}>\n              \n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Shopping List CRUD SPA</h1>\n          </header>\n          <PostForm />\n          <hr />\n          <Posts />\n\n        </div>\n        </Grid.Column>\n      </Grid>\n    \n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import { FETCH_POSTS, NEW_POST, DELETE_POST, UPDATE_POST } from '../actions/types';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload\r\n      };\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        item: action.payload\r\n      };\r\n    case DELETE_POST:\r\n      return{\r\n        ...state,\r\n        item: action.payload\r\n      };\r\n    case UPDATE_POST:\r\n      return{\r\n        ...state,\r\n        item: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n  posts: postReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { Provider, connect } from \"react-redux\";\n\nimport store from './store';\n\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    withRouter\n  } from \"react-router-dom\";\n\nclass Root extends React.Component {\n    \n    render() {\n        return  (\n          <Switch>\n            <Route exact path=\"/\" component={App} />\n            {/*<Route path=\"/update\" component={UpdateForm} />*/}\n          </Switch>\n        );\n      }\n }\n\nconst RootWithAuth = withRouter(\n  connect(\n    null,\n  )(Root)\n);\n\n\nReactDOM.render(\n<Provider store={store}>\n    <Router>\n        <RootWithAuth />\n    </Router>\n</Provider>, \n\ndocument.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}